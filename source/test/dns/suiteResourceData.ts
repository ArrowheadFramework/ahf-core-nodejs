import {A, AAAA, CNAME, MX, NS, PTR, SOA, SRV, TSIG, TXT} from "../../main/dns";
import * as unit from "../unit";
import * as utils from "./utils";

export const suiteResourceData: unit.Suite = {
    name: "ResourceData",

    "Decode SOA": () => utils.readAndCompare(
        Buffer.from([
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
            // 8 mail.dns
            0x08, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x64, 0x6e, 0x73,
            // 9 POINTER TO 0
            0xc0, 0x00,
            // 1000
            0x00, 0x00, 0x03, 0xe8,
            // 3600
            0x00, 0x00, 0x0e, 0x10,
            // 30
            0x00, 0x00, 0x00, 0x1e,
            // 7200
            0x00, 0x00, 0x1c, 0x20,
            // 1800
            0x00, 0x00, 0x07, 0x08,
        ]),
        SOA.read,
        new SOA(
            "arrowhead.org.",
            "mail\\.dns.arrowhead.org.",
            1000, 3600, 30, 7200, 1800
        )
    ),
    "Encode A": () => utils.writeAndCompare(
        new A("127.0.0.1"),
        Buffer.from([
            0x7f, 0x00, 0x00, 0x01,
        ])
    ),
    "Encode AAAA": () => utils.writeAndCompare(
        new AAAA("fe80::72fb:63f5:b321:6a9e"),
        Buffer.from([
            0xfe, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x72, 0xfb, 0x63, 0xf5,
            0xb3, 0x21, 0x6a, 0x9e,
        ])
    ),
    "Encode CNAME": () => utils.writeAndCompare(
        new CNAME("alpha.arrowhead.org"),
        Buffer.from([
            // 5 alpha
            0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
        ])
    ),
    "Encode MX": () => utils.writeAndCompare(
        new MX(1234, "beta.arrowhead.org."),
        Buffer.from([
            // 1234
            0x04, 0xd2,
            // 4 beta
            0x04, 0x62, 0x65, 0x74, 0x61,
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
        ])
    ),
    "Encode NS": () => utils.writeAndCompare(
        new NS("gamma.arrowhead.org."),
        Buffer.from([
            // 5 gamma
            0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61,
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
        ])
    ),
    "Encode PTR": () => utils.writeAndCompare(
        new PTR("delta.arrowhead.org."),
        Buffer.from([
            // 5 delta
            0x05, 0x64, 0x65, 0x6c, 0x74, 0x61,
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
        ])
    ),
    "Encode SOA": () => utils.writeAndCompare(
        new SOA(
            "arrowhead.org.",
            "mail\\.dns.arrowhead.org.",
            1000, 3600, 30, 7200, 1800
        ),
        Buffer.from([
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
            // 8 mail.dns
            0x08, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x64, 0x6e, 0x73,
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
            // 1000
            0x00, 0x00, 0x03, 0xe8,
            // 3600
            0x00, 0x00, 0x0e, 0x10,
            // 30
            0x00, 0x00, 0x00, 0x1e,
            // 7200
            0x00, 0x00, 0x1c, 0x20,
            // 1800
            0x00, 0x00, 0x07, 0x08,
        ])
    ),
    "Encode SRV": () => utils.writeAndCompare(
        new SRV(100, 200, 300, "epsilon.arrowhead.org."),
        Buffer.from([
            // 100
            0x00, 0x64,
            // 200
            0x00, 0xc8,
            // 300
            0x01, 0x2c,
            // 7 epsilon
            0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
            // 9 arrowhead
            0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x68, 0x65, 0x61, 0x64,
            // 3 org
            0x03, 0x6f, 0x72, 0x67,
            // 0
            0x00,
        ])
    ),
    "Encode TSIG": () => utils.writeAndCompare(
        new TSIG(
            "hmac-sha1",
            100, 300,
            Buffer.from([0xfe, 0x1c]),
            200, 0,
            Buffer.from([0xff])
        ),
        Buffer.from([
            // 9 hmac-sha1
            0x09, 0x68, 0x6d, 0x61, 0x63, 0x2d, 0x73, 0x68, 0x61, 0x31,
            // 0
            0x00,
            // 100
            0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
            // 300
            0x01, 0x2c,
            // 2 [0xfe, 0x1c]
            0x00, 0x02, 0xfe, 0x1c,
            // 200
            0x00, 0xc8,
            // 0
            0x00, 0x00,
            // 1 [0xff]
            0x00, 0x01, 0xff,
        ])
    ),
    "Encode TXT": () => utils.writeAndCompare(
        new TXT("\x03a=1\x03b=2\x00"),
        Buffer.from([
            // 3 a=1
            0x03, 0x61, 0x3d, 0x31,
            // 3 b=2
            0x03, 0x62, 0x3d, 0x32,
            // 0
            0x00,
        ])
    ),
};